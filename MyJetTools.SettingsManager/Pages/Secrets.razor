@page "/Secrets"
@using MudBlazor
@using MyJetTools.SettingsManager.Abstractions
@using MyJetTools.SettingsManager.Components.Dialogs
@using MyJetTools.SettingsManager.Forms.Secrets

@inject IDialogService Dialog
@inject ISecretRepository _secretRepository

<MudExpansionPanel Text="Add secret">
    <AddSecretForm SecretsNames="_secrets.Select(itm => itm.Name).ToHashSet()" OnAdd="ReloadData"/>
</MudExpansionPanel>

<MudTable Items="@_secrets" Hover="true" Breakpoint="Breakpoint.Sm">
    <HeaderContent>
        <MudTh>Secret Name</MudTh>
        <MudTh>Last update</MudTh>
        <MudTh>Create date</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Secret name">@context.Name</MudTd>
        <MudTd DataLabel="Last update date">@context.LastUpdate</MudTd>
        <MudTd DataLabel="Create date">@context.CreateDate</MudTd>
        <MudTd DataLabel="Actions">
            <MudButton Variant="Variant.Filled" Size="Size.Small" OnClick="@(async () => await UpdateConfigDialog(context))" Color="Color.Primary">
                Edit config
            </MudButton>
            <MudButton Variant="Variant.Filled" Size="Size.Small" OnClick="@(async () => await DeleteConfig(context))" Color="Color.Error">
                Delete
            </MudButton>
        </MudTd>
    </RowTemplate>
</MudTable>


@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    private IEnumerable<SecretModel> _secrets = new List<SecretModel>();

    private async Task ReloadData()
    {
        _secrets = (await _secretRepository.GetSecretsAsync()).Select(SecretModel.Create);
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await ReloadData();
        await base.OnInitializedAsync();
    }

    private async Task DeleteConfig(ISecretModel src)
    {
        await _secretRepository.RemoveSecret(src);
        await ReloadData();
    }

    private async Task UpdateConfigDialog(ISecretModel src)
    {
        var dialogOptions = new DialogOptions
        {
            MaxWidth = MaxWidth.Large, FullWidth = true
        };
        
        var parameters = new DialogParameters
        {
            ["UpdateModel"] = AddSecretFormModel.Create(src),
        };

        var dialog = Dialog.Show<UpdateSecretDialog>("Update config", parameters, dialogOptions);

        var dialogResult = await dialog.Result;

        if (!dialogResult.Cancelled)
        {
            await ReloadData();
        }

        StateHasChanged();
    }

}